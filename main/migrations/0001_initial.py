# Generated by Django 2.1.7 on 2019-05-02 08:34

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('user', 'user'), ('admin', 'admin'), ('staff', 'staff')], default='user', max_length=5)),
                ('dob', models.DateField(null=True)),
                ('image', models.ImageField(default='default.jpg', null=True, upload_to='profile_pics')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Extra',
            fields=[
                ('extra_id', models.AutoField(primary_key=True, serialize=False)),
                ('extra_description', models.TextField()),
                ('extra_price', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('menu_id', models.AutoField(primary_key=True, serialize=False)),
                ('menu_name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('prepare_time', models.CharField(blank=True, max_length=255, null=True)),
                ('image_path', models.CharField(blank=True, max_length=255, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('not_sell', 'not_sell'), ('sell', 'sell')], default='sell', max_length=8)),
                ('rating', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.AutoField(primary_key=True, serialize=False)),
                ('create_datetime', models.DateTimeField()),
                ('receive_datetime', models.DateTimeField()),
                ('comment', models.TextField()),
                ('total_price', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('report_id', models.AutoField(primary_key=True, serialize=False)),
                ('create_time', models.DateTimeField(blank=True, null=True)),
                ('report_type', models.CharField(choices=[('canteen', 'canteen'), ('restaurant', 'restaurant'), ('other', 'other')], default='canteen', max_length=10)),
                ('detail', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('res_id', models.AutoField(primary_key=True, serialize=False)),
                ('res_name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('close', 'close'), ('open', 'open')], default='open', max_length=5)),
                ('image_path', models.CharField(max_length=255)),
                ('rating', models.IntegerField()),
                ('open_time', models.CharField(max_length=255)),
                ('close_time', models.CharField(max_length=255)),
                ('Sunday', models.BooleanField(blank=True, default=False, null=True)),
                ('Monday', models.BooleanField(blank=True, default=False, null=True)),
                ('Tuesday', models.BooleanField(blank=True, default=False, null=True)),
                ('Wednesday', models.BooleanField(blank=True, default=False, null=True)),
                ('Thursday', models.BooleanField(blank=True, default=False, null=True)),
                ('Friday', models.BooleanField(blank=True, default=False, null=True)),
                ('Saturday', models.BooleanField(blank=True, default=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order_menu',
            fields=[
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='main.Order')),
                ('quantity', models.IntegerField()),
                ('status', models.CharField(choices=[('preparing', 'preparing'), ('finished', 'finished')], default='preparing', max_length=9)),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='User_menu',
            fields=[
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('date', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='User_restaurant',
            fields=[
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('date', models.DateTimeField()),
            ],
        ),
        migrations.AddField(
            model_name='restaurant',
            name='user_id',
            field=models.ForeignKey(on_delete=False, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='report',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='order',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='menu',
            name='res_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Restaurant'),
        ),
        migrations.AddField(
            model_name='extra',
            name='menu_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Menu'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='user_restaurant',
            name='res_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Restaurant'),
        ),
        migrations.AddField(
            model_name='user_menu',
            name='menu_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Menu'),
        ),
        migrations.AddField(
            model_name='staff',
            name='res_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Restaurant'),
        ),
        migrations.AddField(
            model_name='order_menu',
            name='menu_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Menu'),
        ),
        migrations.AlterUniqueTogether(
            name='extra',
            unique_together={('extra_id', 'menu_id')},
        ),
        migrations.AlterUniqueTogether(
            name='user_restaurant',
            unique_together={('user_id', 'res_id')},
        ),
        migrations.AlterUniqueTogether(
            name='user_menu',
            unique_together={('user_id', 'menu_id')},
        ),
        migrations.AlterUniqueTogether(
            name='order_menu',
            unique_together={('order_id', 'menu_id')},
        ),
    ]
